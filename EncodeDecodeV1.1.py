""# MIT License
# 
# Copyright (c) 2025 EAST TIMOR GHOST SECURITY
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.



import base64, codecs, hashlib, os, sys

encrypted_code = ""

decoded_base64 = codecs.decode(encrypted_code, "rot_13")
decoded_code = base64.b64decode(decoded_base64).decode()

def check_integrity():
    with open(sys.argv[0], "rb") as f:
        file_hash = hashlib.sha256(f.read()).hexdigest()
    return file_hash

original_hash = check_integrity()

exec(decoded_code)

if check_integrity() != original_hash:
    print("⚠️ KETA MODIFIKA BE'IK TE'EN...")
    os.remove(sys.argv[0])
